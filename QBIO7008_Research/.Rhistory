# Load libraries for manipulating phylogenies and dendrograms
library(phylogram)
library(ape)
library(viridis)
library(dendextend)
require(graphics)
require(utils)
library(heatmaply)
library(corrplot)
####
newick <- "(A,(B,C));"
e1 <- read.dendrogram(text = newick)
plot(e1, yaxt = 'n')
####
newick <- "(,,(,));" # no nodes are named
newick <- "(A,B,(C,D));" # leaf nodes are named
newick2 <- "(A,B,(C,D)E)F;" # all nodes are named
newick <- "(:0.1,:0.2,(:0.3,:0.4):0.5);" # all but root node have a distance to parent
newick <- "(:0.1,:0.2,(:0.3,:0.4):0.5):0.0;" # all have a distance to parent
newick <- "(A:0.1,B:0.2,(C:0.3,D:0.4):0.5);" # distances and leaf names (popular)
newick <- "(A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;" # distances and all names
newick <- "((B:0.2,(C:0.3,D:0.4)E:0.5)F:0.1)A;v" # a tree rooted on a leaf node (rare)
e2<-read.dendrogram(text = newick2)
plot(e2, yaxt = 'n')
####
newick <- "(,,(,));" # no nodes are named
eee <- read.dendrogram(text = newick)
plot(eee, yaxt = 'n')
newick <- "(A,B,(C,D));" # leaf nodes are named
newick2 <- "(A,B,(C,D)E)F;" # all nodes are named
newick <- "(:0.1,:0.2,(:0.3,:0.4):0.5);" # all but root node have a distance to parent
newick <- "(:0.1,:0.2,(:0.3,:0.4):0.5):0.0;" # all have a distance to parent
newick <- "(A:0.1,B:0.2,(C:0.3,D:0.4):0.5);" # distances and leaf names (popular)
newick <- "(A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;" # distances and all names
newick <- "((B:0.2,(C:0.3,D:0.4)E:0.5)F:0.1)A;v" # a tree rooted on a leaf node (rare)
e2<-read.dendrogram(text = newick2)
plot(e2, yaxt = 'n')
#convert to a phylo object
e1p <- as.phylo(e1)
plot(e1p)
newick2 <- "((raccoon:19.19959,bear:6.80041)
:0.84600,((sea_lion:11.99700, seal:12.00300)
:7.52973,((monkey:100.85930,cat:47.14069)
:20.59201, weasel:18.87953):2.09460)
:3.87382,dog:25.46154);"
e2 <-read.dendrogram (text = newick2)
plot(e2, yaxt = "n")
write.dendrogram(e2, edges = F)
newick3 <- "(Bovine:0.69395,(Gibbon:0.36079,(Orang:0.33636,
(Gorilla:0.17147,(Chimp:0.19268, Human:0.11927):
0.08386):0.06124):0.15057):0.54939,Mouse:1.21460):0.10;"
e3 <- read.dendrogram(text = newick3)
plot(e3, yaxt = "n")
write.dendrogram(e3, edges = F)
#> [1] "(Bovine,(Gibbon,(Orang,(Gorilla,(Chimp,Human)))),Mouse);"
# abc R package - https://tinyurl.com/likelihoodFree
# to analise simulated Parameters and data sets.
library(abc)
# abc R package - https://tinyurl.com/likelihoodFree
# to analise simulated Parameters and data sets.
library(abc)
sampleSize <- 100
data.obs <- rnorm(sampleSize, mean = 0, sd = 1)
head(data.obs, 5)
calc.stats <- function (x) {
S <- c(mean(x),
var(x),
median(x),
range(x),
max(x) - min(x),
quantile(x, probs = c(0.25, 0.75)))
names(S) <-
c("mean", "var", "median", "min", "max", "range", "Q1", "Q3")
return(S)
}
View(calc.stats)
S.obs <- calc.stats(data.obs)
write.table(t(S.obs),
file = "normal.obs",
quote = F,
row.names = F)
S.obs
set.seed(10) # For reproducibility.
nsim <- 1000
P.normal <- # Proposed
data.frame(mu = runif(nsim, min = -1, max = 1),
sigma2 = runif(nsim, min = 0.1 , max = 4))
S.normal <- # Simulation
data.frame(matrix(
data = NA,
ncol = length(S.obs),
nrow = nsim
))
names(S.normal) <- names(S.obs)
for (i in 1:nsim) { # Simulations
y <-
rnorm(sampleSize,
mean = P.normal$mu[i],
sd = sqrt(P.normal$sigma2[i]))
S.normal[i,] <- calc.stats(y)
}
write.table(
cbind(P.normal, S.normal),
file = "simNorm.txt",
quote = F,
row.names = F
)
rejectionABC <-
abc(S.obs, P.normal, S.normal, tol = 0.01, method = "rejection")
View(rejectionABC)
hist(rejectionABC)
summary(rejectionABC)
install.packages("countreg", repos="http://R-Forge.R-project.org")
# install.packages("countreg", repos="http://R-Forge.R-project.org")
?CrabSatellites
CrabSatellites
library("countreg")
CrabSatellites
?CrabSatellites
Crab_dat <- data("CrabSatellites")
View(CrabSatellites)
CrabSatellites
CrabSatellites
library("countreg")
CrabSatellites
CrabSatellites
library(boilrdata)
install.packages(boilrdata)
install.packages("boilrdata")
library(boilrdata)
library("boilrdata")
library(boilrdata)
library("boilrdata")
?bunyas
??bunyas
?CrabSatellites
CrabSatellites
"CrabSatellites"
Crab_dat <- data("CrabSatellites")
View(CrabSatellites)
View(CrabSatellites)
Crab_dat
Crab_dat <- get(data("CrabSatellites"))
View(Crab_dat)
Crab_dat <- get(data("CrabSatellites"))
View(Crab_dat)
??CrabSatellites
?CrabSatellites
View(Crab_dat)
View(Crab_dat)
View(Crab_dat)
Crab_dat <- transform(Crab_dat,color = as.numeric(color), spine = as.numeric(spine))
View(Crab_dat)
Crab_dat <- get(data("CrabSatellites"))
Crab_dat <- transform(Crab_dat,color = as.numeric(color), spine = as.numeric(spine), cwidth = cut(width, c(-Inf, seq(23.25, 29.25), Inf)))
View(Crab_dat)
Crab_dat <- get(data("CrabSatellites"))
Crab_dat <- transform(Crab_dat,color = as.numeric(color), spine = as.numeric(spine))
View(Crab_dat)
View(CrabSatellites)
View(Crab_dat)
Crab_dat <- get(data("CrabSatellites"))
cs_p    <-    glm(satellites ~ width + color, data = CrabSatellites, family = poisson)
View(cs_p)
model_1 <-    glm(satellites ~ width + color, data = CrabSatellites, family = poisson)
model_1 <- glm(satellites ~ width + color, data = CrabSatellites, family = poisson)
View(model_1)
summary(model_1)
View(Crab_dat)
model_1 <- glm(satellites ~ width + color, data = Crab_dat, family = poisson)
summary(model_1)
unique(Crab_dat$color)
unique(Crab_dat$spine)
View(Crab_dat)
mutate(Crab_dat$spine, bothbroken = 0)
library("tidyverse")
mutate(Crab_dat$spine, bothbroken = 0)
?case_when
?CrabSatellites
Crab_dat |> mutate(spine = = case_when(spine == "bothbroken" ~ 0))
Crab_dat |> mutate(spine = case_when(spine == "bothbroken" ~ 0))
View(Crab_dat)
Crab_dat |> mutate(spine = case_when(spine == "bothbroken" ~ 0))
View(Crab_dat)
Crab_dat <- Crab_dat |> mutate(spine = case_when(spine == "bothbroken" ~ 0, spine == "onebroken" ~ 1, spine == "bothgood" ~ 2))
View(Crab_dat)
View(Crab_dat)
?brm()
library(brms)
?brm()
View(Crab_dat)
normal(0,10)
View(Crab_dat)
?range
# Checking the range of satellite that fall into
Range(Crab_dat$satellites)
# Checking the range of satellite that fall into
Range(Crab_dat$satellites)
# Checking the range of satellite that fall into
str(Crab_dat$satellites)
# Checking the range of satellite that fall into
max(Crab_dat$satellites)
# Checking the range of satellite that fall into
range(Crab_dat$satellites)
?prior()
mean(Crab_dat$satellites)
?mean()
View(Crab_dat)
?prior
model_1 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson())
summary(model_1)
plot(model_1)
model_2 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson(), prior = set_prior("normal(5,10)", class = "b"))
summary(model_2)
plot(model_2)
?CrabSatellites
library("countreg")
library("tidyverse")
library(brms)
Crab_dat <- get(data("CrabSatellites"))
?CrabSatellites
# Levels: lightmedium < medium < darkmedium < dark
unique(Crab_dat$color)
# Levels: bothgood < onebroken < bothbroken
unique(Crab_dat$spine)
# Changing the spine category to how many spins are left
Crab_dat <- Crab_dat |> mutate(spine = case_when(spine == "bothbroken" ~ 0, spine == "onebroken" ~ 1, spine == "bothgood" ~ 2))
# Checking the range of satellite that fall into: 0 to 15 males
range(Crab_dat$satellites)
mean(Crab_dat$satellites) #mean is 3
par(mfrow = c(2, 2))
plot(factor(satellites == 0) ~ width, data = CrabSatellites, breaks = seq(20, 33.5, by = 1.5))
plot(factor(satellites == 0) ~ color, data = CrabSatellites, breaks = 1:5 - 0.5)
plot(jitter(satellites) ~ width, data = CrabSatellites, subset = satellites > 0, log = "y")
plot(jitter(satellites) ~ factor(color), data = CrabSatellites, subset = satellites > 0, log = "y")
?CrabSatellites
model_3 <- hurdle(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, dist = "poisson")
summary(model_3)
model_2 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson(), prior = set_prior("normal(5,10)", class = "b"))
summary(model_2)
plot(model_2)
model_1 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson())
summary(model_1)
pp_check(model_1, type = "ecdf_overlay")
pp_check(model_2, type = "ecdf_overlay")
plot(model_2)
conditional_effects(model_1)
# Checking results
conditional_effects(model_2)
model_4 <- hurdle(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, dist = "poisson")
summary(model_4)
library(DHARMa)
DHARMa(model_4)
res_4 <- simulateResiduals(model_4, plot=TRUE)
summary(model_4)
model_4 <- hurdle(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, dist = "poisson")
summary(model_4)
model_3 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = zero_inflated_poisson(link = "log", link_zi = "logit"))
summary(model_3)
summary(model_2)
pp_check(model_3, type = "ecdf_overlay")
plot(model_3)
# Checking results
conditional_effects(model_2)
summary(model_4)
model_1.1 <- glm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson)
summary(model_1.1)
summary(model_1)
model_1.1 <- glm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson)
summary(model_1.1)
summary(model_1)
exp(coef(model_1))
coef(model_1)
fixef(model_1)
exp(fixef(model_1))
exp(fixef(model_2))
exp(fixef(model_3))
summary(model_4)
model_check_1 <- createDHARMa(
simulatedResponse = t(posterior_predict(model_1)),
observedResponse = Crab_dat$satellites,
fittedPredictedResponse = apply(t(posterior_epred(model_1)), 1, mean),
integerResponse = FALSE)
plot(model.check)
plot(model_check_1)
model_check_2 <- createDHARMa(
simulatedResponse = t(posterior_predict(model_2)),
observedResponse = Crab_dat$satellites,
fittedPredictedResponse = apply(t(posterior_epred(model_2)), 1, mean),
integerResponse = FALSE)
plot(model_check_2)
model_check_3 <- createDHARMa(
simulatedResponse = t(posterior_predict(model_3)),
observedResponse = Crab_dat$satellites,
fittedPredictedResponse = apply(t(posterior_epred(model_3)), 1, mean),
integerResponse = FALSE)
plot(model_check_3)
install.packages(“squid”)
install.packages(squid)
install.packages("squid")
library(squid)
squidApp()
library(TeachingDemos)
install.packages(TeachingDemos)
install.packages("TeachingDemos")
library(TeachingDemos)
sig.id<-1
sig.e <-3
simul <- simfun({
n.ids <- 24
n <- 240
response <- h[sex] +rnorm(n.ids,0,sig.id)[id] + rnorm(n,0,sig.e)
}, sig.id=1,  sig.e=3, h=c(10,20),
drop=c('sig.id','sig.e','h','n.ids','n'))
View(simul)
tmpdat <- data.frame(id=gl(24,10),sex=gl(2,10,length=240, labels=c('F','M')))
simdat <- simul(tmpdat)
?simfun
View(tmpdat)
#
library(arm)
m1 <- lmer(response~ sex + (1|id), data=simdat)
summary(m1)
display(m1)
setwd("C:/Users/victo/Desktop/Study/Master_works/QBIO7008_YIQIAN_LI/QBIO7008_Research")
###### Script until 26/10/2023
library("tidyverse")
library(arm)
library(MuMIn)
library(plyr)
library(broom)
library(coda)
library(grid)
library(gridExtra)
library(brms)
library(broom.mixed)
library(merTools)
library(tidybayes)
library(parallel)
library(ggplot2)
library(ggcorrplot)
library(GGally)
dragon_physio <- read_csv("Data/Final_Masters_Data.csv")
colnames(dragon_physio)
length(unique(dragon_physio$Name))
which(is.na(dragon_physio$Body.Temp..Celcius.), arr.ind=TRUE) # all good
which(is.na(dragon_physio$Torso..mms.), arr.ind=TRUE) # all good
which(is.na(dragon_physio$Weight..gms.), arr.ind=TRUE) # Some NAs
which(is.na(dragon_physio$Sex_from_sightings), arr.ind=TRUE) # all good
which(is.na(dragon_physio$Health_Status), arr.ind=TRUE) # all good
which(is.na(dragon_physio$Health_Visual_combined), arr.ind=TRUE) # all good
which(is.na(dragon_physio$Location), arr.ind=TRUE) # Some NAs
which(is.na(dragon_physio$density50_per_season), arr.ind=TRUE) # all good
which(is.na(dragon_physio$Season), arr.ind=TRUE) # all good
dragon_physio_clean <- dragon_physio |> drop_na(c("Weight..gms.", "Location"))
## Finding body temp outlier:
unique_season <- unique(dragon_physio_clean$Season)
column_names <- colnames(dragon_physio_clean)
Total_outlier_body_temp <- data.frame(matrix(nrow = 0, ncol = length(dragon_physio_clean)))
colnames(Total_outlier_body_temp) <- column_names
## Loop through body temp outliers by seasons
for (season in unique_season) {
data_for_this_season <- dragon_physio_clean |> filter(Season == season)
Quantile_body_temp <- quantile(data_for_this_season$Body.Temp..Celcius., probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(data_for_this_season$Body.Temp..Celcius.)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(data_for_this_season, Body.Temp..Celcius. < Lower_body_temp | Body.Temp..Celcius. > Upper_body_temp)
Total_outlier_body_temp <- rbind(Total_outlier_body_temp, Outlier_body_temp)
}
hist(dragon_physio_clean$Weight..gms.)
NA_body_weight <- dragon_physio_clean[is.na(dragon_physio_clean$Weight..gms.),]
zero_body_weight <- dragon_physio_clean |> filter(Weight..gms. <= 0)
Outlier_body_weight <- rbind(NA_body_weight, zero_body_weight)
hist(dragon_physio_clean$Torso..mms.)
max(dragon_physio_clean$Torso..mms.)
NA_body_length <- dragon_physio_clean[is.na(dragon_physio_clean$Torso..mms.),]
zero_body_length <- dragon_physio_clean |> filter(Torso..mms. <= 0)
Outlier_body_length <- rbind(NA_body_length, zero_body_length)
##Filter out body weight and length = 0 data
dragon_physio_clean <- dragon_physio_clean |> filter(Weight..gms. > 0)
dragon_physio_clean <- dragon_physio_clean |> filter(Torso..mms. > 0)
## Adding weight to length ratio on log scale
dragon_physio_clean$W_to_L_ratio <- log10(dragon_physio_clean$Weight..gms.)/log10(dragon_physio_clean$Torso..mms.)
## Outlier of body weight to length log ratio outlier using 3 sd:
mean(dragon_physio_clean$W_to_L_ratio)
Outlier_W_to_L_ratio <- filter(dragon_physio_clean, W_to_L_ratio < (mean(dragon_physio_clean$W_to_L_ratio, na.rm=TRUE) - 3*sd(dragon_physio_clean$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio_clean$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio_clean$W_to_L_ratio, na.rm=TRUE)))
Outlier_W_to_L_ratio <- Outlier_W_to_L_ratio[, -which(names(Outlier_W_to_L_ratio) == "W_to_L_ratio")] # drop the W_to_L_ratio column
## Appending all outliers together and remove duplicated data.
Total_Outlier <- rbind(Total_outlier_body_temp, Outlier_body_weight, Outlier_body_length, Outlier_W_to_L_ratio)
Total_Outlier <- Total_Outlier[!duplicated(Total_Outlier), ]
dragon_physio_clean <- anti_join(dragon_physio_clean, Total_Outlier)
dragon_physio_clean$W_to_L_ratio <- log10(dragon_physio_clean$Weight..gms.)/log10(dragon_physio_clean$Torso..mms.) # Clean up complete
######
# Factorise seasons:
dragon_physio_clean$Season <- as.factor(dragon_physio_clean$Season)
# Factorise health status:
dragon_physio_clean$Health_Status <- as.factor(dragon_physio_clean$Health_Status)
# Adding number of sightings:
df_occurence_count <- as.data.frame(table(dragon_physio_clean$Name))
df_occurence_count$Var1 <- as.character(df_occurence_count$Var1)
dragon_physio_clean <- left_join(dragon_physio_clean, df_occurence_count, by = c("Name" = "Var1"))
dragon_physio_clean <- dragon_physio_clean |> rename(c("Freq" = "number_of_sighting"))
dragon_physio_clean$number_of_sighting <- as.numeric(dragon_physio_clean$number_of_sighting)
# Standardize data to make mean centred around mean and divide 1 standard deviation:
columns_to_standardize <- c("density50_per_season", "W_to_L_ratio", "number_of_sighting")
dragon_physio_clean[columns_to_standardize] <- scale(dragon_physio_clean[columns_to_standardize])
str(dragon_physio_clean)
# Subsets of diseased and healthy individuals since some individual may have their status changed:
unique(dragon_physio_clean$Health_Status) #"Asymptomatic" "Diseased" "No"
dragon_physio_clean_diseased <- dragon_physio_clean |> filter(Health_Status == c('Asymptomatic', 'Diseased'))
dragon_physio_clean_healthy <- dragon_physio_clean |> filter(Health_Status == 'No')
dragon_physio_status_changed <- dragon_physio_clean |> group_by(Name) |>
filter(n_distinct(Health_Status) != 1)
length(unique(dragon_physio_status_changed$Name)) # 95 individuals
# Some model diagnositics:
bayes_R2(model_1)
model_1 <- readRDS("Results/model_1.rds")
# Some model diagnositics:
bayes_R2(model_1)
conditional_r2(model)
conditional_r2(model_1)
conditional_rsquare(model_1)
loo(model_1)
# Checking model summary:
summary(model_1)
hist(dragon_physio_clean$W_to_L_ratio)
model_diseased <- lmer(Body.Temp..Celcius. ~ Sex_from_sightings + Location + W_to_L_ratio + density50_per_season + Season + number_of_sighting
+ (1|Name) + (1|Season:Name), data = dragon_physio_clean_diseased)
model_healthy <- lmer(Body.Temp..Celcius. ~ Sex_from_sightings + Location + W_to_L_ratio + density50_per_season + Season + number_of_sighting
+ (1|Name) + (1|Season:Name), data = dragon_physio_clean_healthy)
residuals_diseased <- residuals(model_diseased)
residuals_healthy <- residuals(model_healthy)
# Perform a Wilcoxon rank-sum test
wilcoxon_test_result <- wilcox.test(residuals_diseased, residuals_healthy)
# View the test result
print(wilcoxon_test_result)
r.squaredGLMM(model_diseased)
r.squaredGLMM(model_healthy)
summary(model_diseased)
summary(model_healthy)
qqnorm(residuals_diseased)
qqline(residuals_diseased)
title("QQ Plot of Residuals - Diseased Model")
pdf("Results/qqplot_diseased.pdf")
dev.off()
qqnorm(residuals_healthy)
qqline(residuals_healthy)
title("QQ Plot of Residuals - Healthy Model")
pdf("Results/qqplot_healthy.pdf")
dev.off()
qqnorm(residuals_diseased)
qqline(residuals_diseased)
title("QQ Plot of Residuals - Diseased Model")
png("Results/qqplot_diseased.pdf")
dev.off()
qqnorm(residuals_healthy)
qqline(residuals_healthy)
title("QQ Plot of Residuals - Healthy Model")
png("Results/qqplot_healthy.pdf")
dev.off()
dev.off()
qqnorm(residuals_diseased)
qqline(residuals_diseased)
title("QQ Plot of Residuals - Diseased Model")
png("Results/qqplot_diseased.png")
dev.off()
qqnorm(residuals_healthy)
qqline(residuals_healthy)
title("QQ Plot of Residuals - Healthy Model")
png("Results/qqplot_healthy.png")
dev.off()
dev.off()
dev.off()
qqnorm(residuals_diseased)
qqline(residuals_diseased)
title("QQ Plot of Residuals - Diseased Model")
png("Results/qqplot_diseased.png")
dev.off()
dev.off()
qqnorm(residuals_healthy)
qqline(residuals_healthy)
title("QQ Plot of Residuals - Healthy Model")
png("Results/qqplot_healthy.png", width = 50, height = 50)
dev.off()
dev.off()
qqnorm(residuals_healthy)
qqline(residuals_healthy)
title("QQ Plot of Residuals - Healthy Model")
png("Results/qqplot_healthy.png", width = 500, height = 500)
dev.off()
qqnorm(residuals_healthy)
qqline(residuals_healthy)
title("QQ Plot of Residuals - Healthy Model", cex.main = 0.9)
dev.off()
qqnorm(residuals_healthy)
qqline(residuals_healthy)
title("QQ Plot of Residuals - Healthy Model", cex.main = 0.9)
dev.off()
qqnorm(residuals_healthy, main = "")
qqline(residuals_healthy)
title("QQ Plot of Residuals - Healthy Model", cex.main = 0.9)
dev.off()
qqnorm(residuals_diseased, main = "")
qqline(residuals_diseased)
title("QQ Plot of Residuals - Diseased Model")
dev.off()
qqnorm(residuals_diseased, main = "")
qqline(residuals_diseased)
title("QQ Plot of Residuals - Diseased Model", cex.main = 0.9)
