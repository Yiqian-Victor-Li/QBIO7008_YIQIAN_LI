Crab_dat |> mutate(spine = case_when(spine == "bothbroken" ~ 0))
View(Crab_dat)
Crab_dat <- Crab_dat |> mutate(spine = case_when(spine == "bothbroken" ~ 0, spine == "onebroken" ~ 1, spine == "bothgood" ~ 2))
View(Crab_dat)
View(Crab_dat)
?brm()
library(brms)
?brm()
View(Crab_dat)
normal(0,10)
View(Crab_dat)
?range
# Checking the range of satellite that fall into
Range(Crab_dat$satellites)
# Checking the range of satellite that fall into
Range(Crab_dat$satellites)
# Checking the range of satellite that fall into
str(Crab_dat$satellites)
# Checking the range of satellite that fall into
max(Crab_dat$satellites)
# Checking the range of satellite that fall into
range(Crab_dat$satellites)
?prior()
mean(Crab_dat$satellites)
?mean()
View(Crab_dat)
?prior
model_1 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson())
summary(model_1)
plot(model_1)
model_2 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson(), prior = set_prior("normal(5,10)", class = "b"))
summary(model_2)
plot(model_2)
?CrabSatellites
library("countreg")
library("tidyverse")
library(brms)
Crab_dat <- get(data("CrabSatellites"))
?CrabSatellites
# Levels: lightmedium < medium < darkmedium < dark
unique(Crab_dat$color)
# Levels: bothgood < onebroken < bothbroken
unique(Crab_dat$spine)
# Changing the spine category to how many spins are left
Crab_dat <- Crab_dat |> mutate(spine = case_when(spine == "bothbroken" ~ 0, spine == "onebroken" ~ 1, spine == "bothgood" ~ 2))
# Checking the range of satellite that fall into: 0 to 15 males
range(Crab_dat$satellites)
mean(Crab_dat$satellites) #mean is 3
par(mfrow = c(2, 2))
plot(factor(satellites == 0) ~ width, data = CrabSatellites, breaks = seq(20, 33.5, by = 1.5))
plot(factor(satellites == 0) ~ color, data = CrabSatellites, breaks = 1:5 - 0.5)
plot(jitter(satellites) ~ width, data = CrabSatellites, subset = satellites > 0, log = "y")
plot(jitter(satellites) ~ factor(color), data = CrabSatellites, subset = satellites > 0, log = "y")
?CrabSatellites
model_3 <- hurdle(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, dist = "poisson")
summary(model_3)
model_2 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson(), prior = set_prior("normal(5,10)", class = "b"))
summary(model_2)
plot(model_2)
model_1 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson())
summary(model_1)
pp_check(model_1, type = "ecdf_overlay")
pp_check(model_2, type = "ecdf_overlay")
plot(model_2)
conditional_effects(model_1)
# Checking results
conditional_effects(model_2)
model_4 <- hurdle(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, dist = "poisson")
summary(model_4)
library(DHARMa)
DHARMa(model_4)
res_4 <- simulateResiduals(model_4, plot=TRUE)
summary(model_4)
model_4 <- hurdle(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, dist = "poisson")
summary(model_4)
model_3 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = zero_inflated_poisson(link = "log", link_zi = "logit"))
summary(model_3)
summary(model_2)
pp_check(model_3, type = "ecdf_overlay")
plot(model_3)
# Checking results
conditional_effects(model_2)
summary(model_4)
model_1.1 <- glm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson)
summary(model_1.1)
summary(model_1)
model_1.1 <- glm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson)
summary(model_1.1)
summary(model_1)
exp(coef(model_1))
coef(model_1)
fixef(model_1)
exp(fixef(model_1))
exp(fixef(model_2))
exp(fixef(model_3))
summary(model_4)
model_check_1 <- createDHARMa(
simulatedResponse = t(posterior_predict(model_1)),
observedResponse = Crab_dat$satellites,
fittedPredictedResponse = apply(t(posterior_epred(model_1)), 1, mean),
integerResponse = FALSE)
plot(model.check)
plot(model_check_1)
model_check_2 <- createDHARMa(
simulatedResponse = t(posterior_predict(model_2)),
observedResponse = Crab_dat$satellites,
fittedPredictedResponse = apply(t(posterior_epred(model_2)), 1, mean),
integerResponse = FALSE)
plot(model_check_2)
model_check_3 <- createDHARMa(
simulatedResponse = t(posterior_predict(model_3)),
observedResponse = Crab_dat$satellites,
fittedPredictedResponse = apply(t(posterior_epred(model_3)), 1, mean),
integerResponse = FALSE)
plot(model_check_3)
install.packages(“squid”)
install.packages(squid)
install.packages("squid")
library(squid)
squidApp()
library(TeachingDemos)
install.packages(TeachingDemos)
install.packages("TeachingDemos")
library(TeachingDemos)
sig.id<-1
sig.e <-3
simul <- simfun({
n.ids <- 24
n <- 240
response <- h[sex] +rnorm(n.ids,0,sig.id)[id] + rnorm(n,0,sig.e)
}, sig.id=1,  sig.e=3, h=c(10,20),
drop=c('sig.id','sig.e','h','n.ids','n'))
View(simul)
tmpdat <- data.frame(id=gl(24,10),sex=gl(2,10,length=240, labels=c('F','M')))
simdat <- simul(tmpdat)
?simfun
View(tmpdat)
#
library(arm)
m1 <- lmer(response~ sex + (1|id), data=simdat)
summary(m1)
display(m1)
###### Script until 30/08/2023
library("tidyverse")
dragon_physio <- read_csv("Data/Final_updated_data.csv")
library("brms")
dragon_physio <- read_csv("Data/Final_updated_data.csv")
setwd("C:/Users/victo/Desktop/Study/Master_works/QBIO7008_YIQIAN_LI/QBIO7008_Research")
dragon_physio <- read_csv("Data/Final_updated_data.csv")
#Filter out outlier body temperature data:
dragon_physio <- dragon_physio |> filter(Body.Temp.C > 0 & Body.Temp.C < 50)
##Remove NA for data missing SVL and weight:
dragon_physio <- dragon_physio |> drop_na(c("SVL", "Weight.g."))
## Adding weight to length ratio
dragon_physio$W_to_L_ratio <- dragon_physio$Weight.g./dragon_physio$SVL
Name_occurence <- as.data.frame(table(dragon_physio$Name))
dragon_physio_new <- left_join(dragon_physio,Name_occurence, by = c("Name" = "Var1"), relationship = "many-to-one")
# Checking body temperature distribution see if Gaussian
hist(dragon_physio$Body.Temp.C)
colnames(dragon_physio_new)
library("brms")
Model_A_1 <- brm(Body.Temp.C ~ Sex.sightings + Location + W_to_L_ratio + ConspecificDensity + Freq + (1|Name), data = dragon_physio_new,family = gaussian())
Model_A_test <- brm(Body.Temp.C ~ ConspecificDensity + Freq, data = dragon_physio_new,family = gaussian())
summary(Model_A_test)
# This stuck on loading
Model_A_1 <- brm(Body.Temp.C ~ Sex.sightings + Location + W_to_L_ratio + ConspecificDensity + Freq + (1|Name), data = dragon_physio_new,family = gaussian())
# This one works
Model_A_test_2 <- brm(Body.Temp.C ~ Sex.sightings + Location, data = dragon_physio_new,family = gaussian())
summary(Model_A_test_2)
###### Script until 30/08/2023
library("tidyverse")
dragon_physio <- read_csv("Data/Final_updated_data.csv")
#Filter out outlier body temperature data:
dragon_physio <- dragon_physio |> filter(Body.Temp.C > 0 & Body.Temp.C < 50)
##Remove NA for data missing SVL and weight:
dragon_physio <- dragon_physio |> drop_na(c("SVL", "Weight.g."))
## Adding weight to length ratio
dragon_physio$W_to_L_ratio <- dragon_physio$Weight.g./dragon_physio$SVL
Name_occurence <- as.data.frame(table(dragon_physio$Name))
dragon_physio_new <- left_join(dragon_physio,Name_occurence, by = c("Name" = "Var1"), relationship = "many-to-one")
## Adding weight to length ratio
dragon_physio$W_to_L_ratio <- log10(dragon_physio$Weight.g.)/log10(dragon_physio$SVL)
dragon_physio <- dragon_physio |> filter(W_to_L_ratio>0)
Name_occurence <- as.data.frame(table(dragon_physio$Name))
dragon_physio_new <- left_join(dragon_physio,Name_occurence, by = c("Name" = "Var1"), relationship = "many-to-one")
# Checking body temperature distribution see if Gaussian
hist(dragon_physio$Body.Temp.C)
colnames(dragon_physio_new)
library("brms")
Model_A_3 <- brm(Body.Temp.C ~ Sex.sightings + Location + ConspecificDensity + W_to_L_ratio + (1|Name), data = dragon_physio_new,family = gaussian())
library("brms")
Model_A_3 <- brm(Body.Temp.C ~ Sex.sightings + Location + ConspecificDensity + W_to_L_ratio + (1|Name), data = dragon_physio_new,family = gaussian())
View(dragon_physio)
summary(Model_A_3)
###### Script until 30/08/2023
library("tidyverse")
dragon_physio <- read_csv("Data/Final_updated_data.csv")
#Filter out outlier body temperature data:
dragon_physio <- dragon_physio |> filter(Body.Temp.C > 0 & Body.Temp.C < 50)
##Remove NA for data missing SVL and weight:
dragon_physio <- dragon_physio |> drop_na(c("SVL", "Weight.g."))
View(dragon_physio)
View(dragon_physio)
##Filter out body weight and length = 0 data
dragon_physio <- dragon_physio |> filter(Weight.g. > 0)
dragon_physio <- dragon_physio |> filter(SVL > 0)
View(dragon_physio)
Outlier_dragon_physio <- dragon_physio[which(Body.Temp.C <= 0 | Body.Temp.C > 50)]
Outlier_dragon_physio <- dragon_physio$Body.Temp.C[which(Body.Temp.C <= 0 | Body.Temp.C > 50)]
Quantile_body_temp <- quantile(dragon_physio$Body.Temp.C, probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(dragon_physio$Body.Temp.C)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(dragon_physio, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
View(Outlier_body_temp)
Outlier_body_temp <- subset(dragon_physio, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
View(Outlier_body_temp)
?IQR
Quantile_body_temp
unique(dragon_physio$Season)
View(dragon_physio)
for (x in dragon_physio$Season) {
print(x)
}
unique_season <- unique(dragon_physio$Season)
for (x in unique_season) {
print(x)
}
column_names <- colnames(dragon_physio)
Total_outlier_body_temp <- NA
colnames(Total_outlier_body_temp) <- column_names
Total_outlier_body_temp <- data.frame()
View(Total_outlier_body_temp)
colnames(Total_outlier_body_temp) <- column_names
data.frame
?data.frame
Total_outlier_body_temp <- data.frame(nrow=3)
View(Total_outlier_body_temp)
Total_outlier_body_temp <- data.frame()
Total_outlier_body_temp <- data.frame(matrix(nrow = 0, ncol = length(dragon_physio)))
View(Total_outlier_body_temp)
colnames(Total_outlier_body_temp) <- column_names
View(Total_outlier_body_temp)
## Loop through body temp outliers by seasons
for (x in unique_season) {
data_for_this_season <- dragon_physio |> filter(Season = x)
Quantile_body_temp <- quantile(data_for_this_season$Body.Temp.C, probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(data_for_this_season$Body.Temp.C)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(dragon_physio, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
Total_outlier_body_temp <- rbind(Total_outlier_body_temp, Outlier_body_temp)
}
## Loop through body temp outliers by seasons
for (x in unique_season) {
data_for_this_season <- dragon_physio |> filter(Season == x)
Quantile_body_temp <- quantile(data_for_this_season$Body.Temp.C, probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(data_for_this_season$Body.Temp.C)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(dragon_physio, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
Total_outlier_body_temp <- rbind(Total_outlier_body_temp, Outlier_body_temp)
}
View(Total_outlier_body_temp)
View(data_for_this_season)
unique_season <- unique(dragon_physio$Season)
column_names <- colnames(dragon_physio)
Total_outlier_body_temp <- data.frame(matrix(nrow = 0, ncol = length(dragon_physio)))
colnames(Total_outlier_body_temp) <- column_names
## Loop through body temp outliers by seasons
for (x in unique_season) {
data_for_this_season <- dragon_physio |> filter(Season == x)
Quantile_body_temp <- quantile(data_for_this_season$Body.Temp.C, probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(data_for_this_season$Body.Temp.C)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(data_for_this_season, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
Total_outlier_body_temp <- rbind(Total_outlier_body_temp, Outlier_body_temp)
}
View(Total_outlier_body_temp)
View(Outlier_body_temp)
View(Total_outlier_body_temp)
dragon_physio <- read_csv("Data/Final_updated_data.csv")
dragon_physio <- read_csv("Data/Final_updated_data.csv")
unique_season <- unique(dragon_physio$Season)
column_names <- colnames(dragon_physio)
Total_outlier_body_temp <- data.frame(matrix(nrow = 0, ncol = length(dragon_physio)))
colnames(Total_outlier_body_temp) <- column_names
## Loop through body temp outliers by seasons
for (x in unique_season) {
data_for_this_season <- dragon_physio |> filter(Season == x)
Quantile_body_temp <- quantile(data_for_this_season$Body.Temp.C, probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(data_for_this_season$Body.Temp.C)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(data_for_this_season, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
Total_outlier_body_temp <- rbind(Total_outlier_body_temp, Outlier_body_temp)
}
View(Total_outlier_body_temp)
dragon_physio <- read_csv("Data/Final_updated_data.csv")
unique_season <- unique(dragon_physio$Season)
column_names <- colnames(dragon_physio)
Total_outlier_body_temp <- data.frame(matrix(nrow = 0, ncol = length(dragon_physio)))
colnames(Total_outlier_body_temp) <- column_names
## Loop through body temp outliers by seasons
for (x in unique_season) {
data_for_this_season <- dragon_physio |> filter(Season == x)
Quantile_body_temp <- quantile(data_for_this_season$Body.Temp.C, probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(data_for_this_season$Body.Temp.C)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(data_for_this_season, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
Total_outlier_body_temp <- rbind(Total_outlier_body_temp, Outlier_body_temp)
}
View(dragon_physio)
## Body weight outlier:
Quantile_body_weight <- quantile(dragon_physio$Weight.g., probs=c(.25, .75), na.rm = FALSE)
NA_body_weight <- is.na(dragon_physio$Weight.g.)
NA_body_weight <- dragon_physio[is.na(dragon_physio$Weight.g.),]
View(NA_body_weight)
View(Outlier_body_temp)
## Body weight outlier:
Quantile_body_weight <- quantile(dragon_physio$Weight.g., probs=c(.25, .75), na.rm = TRUE)
IQR_body_weight <- IQR(dragon_physio$Weight.g.)
IQR_body_weight <- IQR(dragon_physio$Weight.g., na.rm = TRUE)
Lower_body_weight <- Quantile_body_weight[1] - 1.5*IQR_body_weight
Upper_body_weight <- Quantile_body_weight[2] + 1.5*IQR_body_weight
Outlier_body_weight <- subset(Outlier_body_weight, Weight.g. < Lower_body_temp | Weight.g. > Upper_body_temp)
Outlier_body_weight <- subset(dragon_physio, Weight.g. < Lower_body_temp | Weight.g. > Upper_body_temp)
NA_body_weight <- dragon_physio[is.na(dragon_physio$Weight.g.),]
Outlier_body_weight <- rbind(Outlier_body_weight, NA_body_weight)
View(Outlier_body_weight)
?sd
?sd
sd(dragon_physio$Weight.g.)
sd(dragon_physio$Body.Temp.C)
sd(dragon_physio$Weight.g.)
## Body weight outlier using 3 sd:
Outlier_body_weight <- filter(dragon_physio, Weight.g. < (mean(dragon_physio$Weight.g., na.rm=TRUE) + 3*sd(dragon_physio$Weight.g., na.rm=TRUE)) | Weight.g. > (mean(dragon_physio$Weight.g., na.rm=TRUE) + 3*sd(dragon_physio$Weight.g., na.rm=TRUE)))
View(Outlier_body_weight)
NA_body_weight <- dragon_physio[is.na(dragon_physio$Weight.g.),]
0_body_weight <- filter(Weight.g. <= 0)
Outlier_body_weight <- rbind(NA_body_weight, zero_body_weight)
zero_body_weight <- filter(Weight.g. <= 0)
zero_body_weight <- dragon_physio |> filter(Weight.g. <= 0)
Outlier_body_weight <- rbind(NA_body_weight, zero_body_weight)
View(Outlier_body_weight)
NA_body_length <- dragon_physio[is.na(dragon_physio$SVL),]
zero_body_length <- dragon_physio |> filter(SVL <= 0)
Outlier_body_length <- rbind(NA_body_length, zero_body_length)
View(Outlier_body_length)
##Remove NA for data missing SVL and weight:
dragon_physio <- dragon_physio |> drop_na(c("SVL", "Weight.g."))
##Filter out body weight and length = 0 data
dragon_physio <- dragon_physio |> filter(Weight.g. > 0)
dragon_physio <- dragon_physio |> filter(SVL > 0)
## Adding weight to length ratio on log scale
dragon_physio$W_to_L_ratio <- log10(dragon_physio$Weight.g.)/log10(dragon_physio$SVL)
View(dragon_physio)
## Outlier of body weight to length log ratio outlier using 3 sd:
Outlier_W_to_L_ratio <- filter(dragon_physio, W_to_L_ratio < (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)))
View(Outlier_W_to_L_ratio)
hist(dragon_physio$Weight.g.)
hist(dragon_physio$SVL)
max(dragon_physio$SVL)
hist(dragon_physio$SVL)
max(dragon_physio$SVL)
hist(dragon_physio$Weight.g.)
View(Outlier_W_to_L_ratio)
## Outlier of body weight to length log ratio outlier using 3 sd:
mean(dragon_physio$W_to_L_ratio)
Total_Outlier <- rbind(Total_outlier_body_temp, Outlier_body_weight, Outlier_body_length)
View(Total_Outlier)
Outlier_W_to_L_ratio <- subset(Outlier_W_to_L_ratio, select = W_to_L_ratio)
View(Outlier_W_to_L_ratio)
Outlier_W_to_L_ratio <- filter(dragon_physio, W_to_L_ratio < (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)))
Outlier_W_to_L_ratio <- subset(Outlier_W_to_L_ratio, select = W_to_L_ratio)
View(Outlier_W_to_L_ratio)
Outlier_W_to_L_ratio <- filter(dragon_physio, W_to_L_ratio < (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)))
Outlier_W_to_L_ratio <- filter(dragon_physio, W_to_L_ratio < (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)))
Outlier_W_to_L_ratio <- Outlier_W_to_L_ratio[, -which(names(Outlier_W_to_L_ratio) == "W_to_L_ratio")]
View(Outlier_W_to_L_ratio)
Total_Outlier <- rbind(Total_outlier_body_temp, Outlier_body_weight, Outlier_body_length, Outlier_W_to_L_ratio)
Total_Outlier <- Total_Outlier[!duplicated(Total_Outlier), ]
View(Total_Outlier)
dragon_physio <- read_csv("Data/Final_updated_data.csv")
## Body temp outlier
unique_season <- unique(dragon_physio$Season)
column_names <- colnames(dragon_physio)
Total_outlier_body_temp <- data.frame(matrix(nrow = 0, ncol = length(dragon_physio)))
colnames(Total_outlier_body_temp) <- column_names
## Loop through body temp outliers by seasons
for (x in unique_season) {
data_for_this_season <- dragon_physio |> filter(Season == x)
Quantile_body_temp <- quantile(data_for_this_season$Body.Temp.C, probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(data_for_this_season$Body.Temp.C)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(data_for_this_season, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
Total_outlier_body_temp <- rbind(Total_outlier_body_temp, Outlier_body_temp)
}
hist(dragon_physio$Weight.g.)
NA_body_weight <- dragon_physio[is.na(dragon_physio$Weight.g.),]
zero_body_weight <- dragon_physio |> filter(Weight.g. <= 0)
Outlier_body_weight <- rbind(NA_body_weight, zero_body_weight)
hist(dragon_physio$SVL)
max(dragon_physio$SVL)
NA_body_length <- dragon_physio[is.na(dragon_physio$SVL),]
zero_body_length <- dragon_physio |> filter(SVL <= 0)
Outlier_body_length <- rbind(NA_body_length, zero_body_length)
##Remove NA for data missing SVL and weight:
dragon_physio <- dragon_physio |> drop_na(c("SVL", "Weight.g."))
##Filter out body weight and length = 0 data
dragon_physio <- dragon_physio |> filter(Weight.g. > 0)
dragon_physio <- dragon_physio |> filter(SVL > 0)
## Adding weight to length ratio on log scale
dragon_physio$W_to_L_ratio <- log10(dragon_physio$Weight.g.)/log10(dragon_physio$SVL)
## Outlier of body weight to length log ratio outlier using 3 sd:
mean(dragon_physio$W_to_L_ratio)
Outlier_W_to_L_ratio <- filter(dragon_physio, W_to_L_ratio < (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)))
Outlier_W_to_L_ratio <- Outlier_W_to_L_ratio[, -which(names(Outlier_W_to_L_ratio) == "W_to_L_ratio")]
Total_Outlier <- rbind(Total_outlier_body_temp, Outlier_body_weight, Outlier_body_length, Outlier_W_to_L_ratio)
Total_Outlier <- Total_Outlier[!duplicated(Total_Outlier), ]
dragon_physio <- read_csv("Data/Final_updated_data.csv")
## Body temp outlier
unique_season <- unique(dragon_physio$Season)
column_names <- colnames(dragon_physio)
Total_outlier_body_temp <- data.frame(matrix(nrow = 0, ncol = length(dragon_physio)))
colnames(Total_outlier_body_temp) <- column_names
## Loop through body temp outliers by seasons
for (x in unique_season) {
data_for_this_season <- dragon_physio |> filter(Season == x)
Quantile_body_temp <- quantile(data_for_this_season$Body.Temp.C, probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(data_for_this_season$Body.Temp.C)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(data_for_this_season, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
Total_outlier_body_temp <- rbind(Total_outlier_body_temp, Outlier_body_temp)
}
hist(dragon_physio$Weight.g.)
NA_body_weight <- dragon_physio[is.na(dragon_physio$Weight.g.),]
zero_body_weight <- dragon_physio |> filter(Weight.g. <= 0)
Outlier_body_weight <- rbind(NA_body_weight, zero_body_weight)
hist(dragon_physio$SVL)
max(dragon_physio$SVL)
NA_body_length <- dragon_physio[is.na(dragon_physio$SVL),]
zero_body_length <- dragon_physio |> filter(SVL <= 0)
Outlier_body_length <- rbind(NA_body_length, zero_body_length)
##Remove NA for data missing SVL and weight:
dragon_physio <- dragon_physio |> drop_na(c("SVL", "Weight.g."))
##Filter out body weight and length = 0 data
dragon_physio <- dragon_physio |> filter(Weight.g. > 0)
dragon_physio <- dragon_physio |> filter(SVL > 0)
## Adding weight to length ratio on log scale
dragon_physio$W_to_L_ratio <- log10(dragon_physio$Weight.g.)/log10(dragon_physio$SVL)
## Outlier of body weight to length log ratio outlier using 3 sd:
mean(dragon_physio$W_to_L_ratio)
Outlier_W_to_L_ratio <- filter(dragon_physio, W_to_L_ratio < (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)))
Outlier_W_to_L_ratio <- Outlier_W_to_L_ratio[, -which(names(Outlier_W_to_L_ratio) == "W_to_L_ratio")]
Outlier_W_to_L_ratio <- filter(dragon_physio, W_to_L_ratio < (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)))
Outlier_W_to_L_ratio <- Outlier_W_to_L_ratio[, -which(names(Outlier_W_to_L_ratio) == "W_to_L_ratio")]
Outlier_W_to_L_ratio <- filter(dragon_physio, W_to_L_ratio < (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) - 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)))
Outlier_W_to_L_ratio <- Outlier_W_to_L_ratio[, -which(names(Outlier_W_to_L_ratio) == "W_to_L_ratio")]
Total_Outlier <- rbind(Total_outlier_body_temp, Outlier_body_weight, Outlier_body_length, Outlier_W_to_L_ratio)
Total_Outlier <- Total_Outlier[!duplicated(Total_Outlier), ]
View(Total_Outlier)
write_csv(Total_Outlier, "Data/Total_Outlier.csv")
View(Total_outlier_body_temp)
write_csv(Total_outlier_body_temp, "Data/Total_outlier_body_temp.csv")
dragon_physio <- read_csv("Data/Final_updated_data.csv")
## Body temp outlier
unique_season <- unique(dragon_physio$Season)
column_names <- colnames(dragon_physio)
Total_outlier_body_temp <- data.frame(matrix(nrow = 0, ncol = length(dragon_physio)))
colnames(Total_outlier_body_temp) <- column_names
## Loop through body temp outliers by seasons
for (x in unique_season) {
data_for_this_season <- dragon_physio |> filter(Season == x)
Quantile_body_temp <- quantile(data_for_this_season$Body.Temp.C, probs=c(.25, .75), na.rm = FALSE)
IQR_body_temp <- IQR(data_for_this_season$Body.Temp.C)
Lower_body_temp <- Quantile_body_temp[1] - 1.5*IQR_body_temp
Upper_body_temp <- Quantile_body_temp[2] + 1.5*IQR_body_temp
Outlier_body_temp <- subset(data_for_this_season, Body.Temp.C < Lower_body_temp | Body.Temp.C > Upper_body_temp)
Total_outlier_body_temp <- rbind(Total_outlier_body_temp, Outlier_body_temp)
}
write_csv(Total_outlier_body_temp, "Data/Total_outlier_body_temp.csv")
hist(dragon_physio$Weight.g.)
NA_body_weight <- dragon_physio[is.na(dragon_physio$Weight.g.),]
zero_body_weight <- dragon_physio |> filter(Weight.g. <= 0)
Outlier_body_weight <- rbind(NA_body_weight, zero_body_weight)
hist(dragon_physio$SVL)
max(dragon_physio$SVL)
NA_body_length <- dragon_physio[is.na(dragon_physio$SVL),]
zero_body_length <- dragon_physio |> filter(SVL <= 0)
Outlier_body_length <- rbind(NA_body_length, zero_body_length)
##Remove NA for data missing SVL and weight:
dragon_physio <- dragon_physio |> drop_na(c("SVL", "Weight.g."))
##Filter out body weight and length = 0 data
dragon_physio <- dragon_physio |> filter(Weight.g. > 0)
dragon_physio <- dragon_physio |> filter(SVL > 0)
## Adding weight to length ratio on log scale
dragon_physio$W_to_L_ratio <- log10(dragon_physio$Weight.g.)/log10(dragon_physio$SVL)
## Outlier of body weight to length log ratio outlier using 3 sd:
mean(dragon_physio$W_to_L_ratio)
Outlier_W_to_L_ratio <- filter(dragon_physio, W_to_L_ratio < (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) - 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)) | W_to_L_ratio > (mean(dragon_physio$W_to_L_ratio, na.rm=TRUE) + 3*sd(dragon_physio$W_to_L_ratio, na.rm=TRUE)))
Outlier_W_to_L_ratio <- Outlier_W_to_L_ratio[, -which(names(Outlier_W_to_L_ratio) == "W_to_L_ratio")]
Total_Outlier <- rbind(Total_outlier_body_temp, Outlier_body_weight, Outlier_body_length, Outlier_W_to_L_ratio)
Total_Outlier <- Total_Outlier[!duplicated(Total_Outlier), ]
write_csv(Total_Outlier, "Data/Total_Outlier.csv")
Weight_and_SVL_outlier <- rbind(Outlier_body_weight, Outlier_body_length, Outlier_W_to_L_ratio)
Weight_and_SVL_outlier <- Weight_and_SVL_outlier[!duplicated(Weight_and_SVL_outlier), ]
write_csv(Weight_and_SVL_outlier, "Data/Weight_and_SVL_outlier.csv")
