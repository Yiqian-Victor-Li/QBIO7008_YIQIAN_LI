# Checking the range of satellite that fall into
range(Crab_dat$satellites)
?prior()
mean(Crab_dat$satellites)
?mean()
View(Crab_dat)
?prior
model_1 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson())
summary(model_1)
plot(model_1)
model_2 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson(), prior = set_prior("normal(5,10)", class = "b"))
summary(model_2)
plot(model_2)
?CrabSatellites
library("countreg")
library("tidyverse")
library(brms)
Crab_dat <- get(data("CrabSatellites"))
?CrabSatellites
# Levels: lightmedium < medium < darkmedium < dark
unique(Crab_dat$color)
# Levels: bothgood < onebroken < bothbroken
unique(Crab_dat$spine)
# Changing the spine category to how many spins are left
Crab_dat <- Crab_dat |> mutate(spine = case_when(spine == "bothbroken" ~ 0, spine == "onebroken" ~ 1, spine == "bothgood" ~ 2))
# Checking the range of satellite that fall into: 0 to 15 males
range(Crab_dat$satellites)
mean(Crab_dat$satellites) #mean is 3
par(mfrow = c(2, 2))
plot(factor(satellites == 0) ~ width, data = CrabSatellites, breaks = seq(20, 33.5, by = 1.5))
plot(factor(satellites == 0) ~ color, data = CrabSatellites, breaks = 1:5 - 0.5)
plot(jitter(satellites) ~ width, data = CrabSatellites, subset = satellites > 0, log = "y")
plot(jitter(satellites) ~ factor(color), data = CrabSatellites, subset = satellites > 0, log = "y")
?CrabSatellites
model_3 <- hurdle(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, dist = "poisson")
summary(model_3)
model_2 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson(), prior = set_prior("normal(5,10)", class = "b"))
summary(model_2)
plot(model_2)
model_1 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson())
summary(model_1)
pp_check(model_1, type = "ecdf_overlay")
pp_check(model_2, type = "ecdf_overlay")
plot(model_2)
conditional_effects(model_1)
# Checking results
conditional_effects(model_2)
model_4 <- hurdle(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, dist = "poisson")
summary(model_4)
library(DHARMa)
DHARMa(model_4)
res_4 <- simulateResiduals(model_4, plot=TRUE)
summary(model_4)
model_4 <- hurdle(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, dist = "poisson")
summary(model_4)
model_3 <- brm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = zero_inflated_poisson(link = "log", link_zi = "logit"))
summary(model_3)
summary(model_2)
pp_check(model_3, type = "ecdf_overlay")
plot(model_3)
# Checking results
conditional_effects(model_2)
summary(model_4)
model_1.1 <- glm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson)
summary(model_1.1)
summary(model_1)
model_1.1 <- glm(satellites ~ color + spine + width + weight + width:weight, data = Crab_dat, family = poisson)
summary(model_1.1)
summary(model_1)
exp(coef(model_1))
coef(model_1)
fixef(model_1)
exp(fixef(model_1))
exp(fixef(model_2))
exp(fixef(model_3))
summary(model_4)
model_check_1 <- createDHARMa(
simulatedResponse = t(posterior_predict(model_1)),
observedResponse = Crab_dat$satellites,
fittedPredictedResponse = apply(t(posterior_epred(model_1)), 1, mean),
integerResponse = FALSE)
plot(model.check)
plot(model_check_1)
model_check_2 <- createDHARMa(
simulatedResponse = t(posterior_predict(model_2)),
observedResponse = Crab_dat$satellites,
fittedPredictedResponse = apply(t(posterior_epred(model_2)), 1, mean),
integerResponse = FALSE)
plot(model_check_2)
model_check_3 <- createDHARMa(
simulatedResponse = t(posterior_predict(model_3)),
observedResponse = Crab_dat$satellites,
fittedPredictedResponse = apply(t(posterior_epred(model_3)), 1, mean),
integerResponse = FALSE)
plot(model_check_3)
install.packages(“squid”)
install.packages(squid)
install.packages("squid")
library(squid)
squidApp()
library(TeachingDemos)
install.packages(TeachingDemos)
install.packages("TeachingDemos")
library(TeachingDemos)
sig.id<-1
sig.e <-3
simul <- simfun({
n.ids <- 24
n <- 240
response <- h[sex] +rnorm(n.ids,0,sig.id)[id] + rnorm(n,0,sig.e)
}, sig.id=1,  sig.e=3, h=c(10,20),
drop=c('sig.id','sig.e','h','n.ids','n'))
View(simul)
tmpdat <- data.frame(id=gl(24,10),sex=gl(2,10,length=240, labels=c('F','M')))
simdat <- simul(tmpdat)
?simfun
View(tmpdat)
#
library(arm)
m1 <- lmer(response~ sex + (1|id), data=simdat)
summary(m1)
display(m1)
library("tidyverse")
setwd("C:/Users/victo/Desktop/Study/Master_works/QBIO7008/Preresearch_study")
Dragon_data_full <- read_csv("Test_data_1.csv")
View(Dragon_data_full)
colnames(Dragon_data_full)
?names
rename()
?rename
Dragon_data_full |> rename(Survey ID = suvery_id)
rename(Dragon_data_full, Survey ID = suvery_id)
rename(Dragon_data_full, suvery_id = Survey ID)
rename(Dragon_data_full, suvery_id = Survey ID)
rename(Dragon_data_full, "suvery_id" = "Survey ID")
Dragon_data_full <- rename(Dragon_data_full, c("suvery_id" = "Survey ID", "sighting_id" = "Sighting ID"))
View(Dragon_data_full)
View(Dragon_data_full)
View(Dragon_data_full)
View(Dragon_data_full)
Dragon_data_full <- rename(Dragon_data_full, c("suvery_id" = "Survey ID", "sighting_id" = "Sighting ID", "field_season" = "Field Season",
"body_temp" = "Body Temp (Celcius)", "Tasting_The_Ground" = "Tasting the Ground",
"Head_Bob_Slow" = "Head-Bob Slow", "Head_Bob_Fast" = "Head-Bob Fast",
"Arm_Wave_Left" = "Arm-Wave Left", "Arm_Wave_Right" = "Arm-Wave Right",
"Fighting_c" = "Fighting (contact)", "Fighting_nc" = "Fighting (non-contact)",
"recorder" = "Created by", "last_modified" = "Last modified"
))
Dragon_data_full <- read_csv("Test_data_1.csv")
Dragon_data_full <- rename(Dragon_data_full, c("suvery_id" = "Survey ID", "sighting_id" = "Sighting ID", "field_season" = "Field Season",
"body_temp" = "Body Temp (Celcius)", "Tasting_The_Ground" = "Tasting the Ground",
"Head_Bob_Slow" = "Head-Bob Slow", "Head_Bob_Fast" = "Head-Bob Fast",
"Arm_Wave_Left" = "Arm-Wave Left", "Arm_Wave_Right" = "Arm-Wave Right",
"Fighting_c" = "Fighting (contact)", "Fighting_nc" = "Fighting (non-contact)",
"recorder" = "Created by", "last_modified" = "Last modified"
))
View(Dragon_data_full)
View(Dragon_data_full)
Dragon_data_full <- read_csv("Test_data_1.csv")
colnames(Dragon_data_full)
Dragon_data_full <- rename(Dragon_data_full, c("suvery_id" = "Survey ID", "sighting_id" = "Sighting ID", "field_season" = "Field Season",
"body_temp" = "Body Temp (Celcius)", "Tasting_The_Ground" = "Tasting the Ground",
"Head_Bob_Slow" = "Head-Bob Slow", "Head_Bob_Fast" = "Head-Bob Fast", "Head_Bob" = "Head-Bob",
"Arm_Wave_Left" = "Arm-Wave Left", "Arm_Wave_Right" = "Arm-Wave Right", "Arm_Wave" = "Arm-Wave",
"Fighting_c" = "Fighting (contact)", "Fighting_nc" = "Fighting (non-contact)",
"recorder" = "Created by", "last_modified" = "Last modified"
))
View(Dragon_data_full)
Dragon_data_full <- read_csv("Test_data_1.csv")
colnames(Dragon_data_full)
Dragon_data_full <- rename(Dragon_data_full, c("suvery_id" = "Survey ID", "sighting_id" = "Sighting ID", "field_season" = "Field Season",
"body_temp" = "Body Temp (Celcius)", "Tasting_The_Ground" = "Tasting the Ground", "Tail_Slap" = "Tail-Slap",
"Head_Bob_Slow" = "Head-Bob Slow", "Head_Bob_Fast" = "Head-Bob Fast", "Head_Bob" = "Head-Bob",
"Arm_Wave_Left" = "Arm-Wave Left", "Arm_Wave_Right" = "Arm-Wave Right", "Arm_Wave" = "Arm-Wave",
"Fighting_c" = "Fighting (contact)", "Fighting_nc" = "Fighting (non-contact)",
"recorder" = "Created by", "last_modified" = "Last modified"
))
View(Dragon_data_full)
Dragon_data_full <- read_csv("Test_data_1.csv")
colnames(Dragon_data_full)
Dragon_data_full <- rename(Dragon_data_full, c("survey_id" = "Survey ID", "sighting_id" = "Sighting ID", "field_season" = "Field Season",
"body_temp" = "Body Temp (Celcius)", "Tasting_The_Ground" = "Tasting the Ground", "Tail_Slap" = "Tail-Slap",
"Head_Bob_Slow" = "Head-Bob Slow", "Head_Bob_Fast" = "Head-Bob Fast", "Head_Bob" = "Head-Bob",
"Arm_Wave_Left" = "Arm-Wave Left", "Arm_Wave_Right" = "Arm-Wave Right", "Arm_Wave" = "Arm-Wave",
"Fighting_c" = "Fighting (contact)", "Fighting_nc" = "Fighting (non-contact)",
"recorder" = "Created by", "last_modified" = "Last modified"
))
Dragon_dat <- Dragon_data_full |> drop_na(body_temp, survey_id, sighting_id)
View(Dragon_dat)
## Exclude all data without a id or body temperature measurement:
Dragon_dat_0.1 <- Dragon_data_full |> drop_na(survey_id, sighting_id)
Dragon_data_full <- read_csv("Test_data_1.csv")
colnames(Dragon_data_full)
Dragon_data_full <- rename(Dragon_data_full, c("survey_id" = "Survey ID", "sighting_id" = "Sighting ID", "field_season" = "Field Season",
"body_temp" = "Body Temp (Celcius)", "Tasting_The_Ground" = "Tasting the Ground", "Tail_Slap" = "Tail-Slap",
"Head_Bob_Slow" = "Head-Bob Slow", "Head_Bob_Fast" = "Head-Bob Fast", "Head_Bob" = "Head-Bob",
"Arm_Wave_Left" = "Arm-Wave Left", "Arm_Wave_Right" = "Arm-Wave Right", "Arm_Wave" = "Arm-Wave",
"Fighting_c" = "Fighting (contact)", "Fighting_nc" = "Fighting (non-contact)",
"recorder" = "Created by", "last_modified" = "Last modified"
))
## Exclude all data without a id or body temperature measurement:
Dragon_dat <- Dragon_data_full |> drop_na(body_temp, survey_id, sighting_id)
Dragon_data_full <- read_csv("Test_data_1.csv")
colnames(Dragon_data_full)
Dragon_data_full <- rename(Dragon_data_full, c("survey_id" = "Survey ID", "sighting_id" = "Sighting ID", "field_season" = "Field Season",
"body_temp" = "Body Temp (Celcius)", "Tasting_The_Ground" = "Tasting the Ground", "Tail_Slap" = "Tail-Slap",
"Head_Bob_Slow" = "Head-Bob Slow", "Head_Bob_Fast" = "Head-Bob Fast", "Head_Bob" = "Head-Bob",
"Arm_Wave_Left" = "Arm-Wave Left", "Arm_Wave_Right" = "Arm-Wave Right", "Arm_Wave" = "Arm-Wave",
"Fighting_c" = "Fighting (contact)", "Fighting_nc" = "Fighting (non-contact)",
"recorder" = "Created by", "last_modified" = "Last modified"
))
## Exclude all data without a id or body temperature measurement:
Dragon_dat <- Dragon_data_full |> drop_na(body_temp, survey_id, sighting_id)
View(Dragon_dat)
## Enviromental variables are: field_season and location? (but they are not gradient)
unique(Dragon_dat$field_season)
unique(Dragon_dat$Location)
?select
View(Dragon_dat)
# How long is one season?
select(Dragon_dat, field_season == "Field Season 1")
# How long is one season?
filter(Dragon_dat, field_season == "Field Season 1")
# How long is one season?
filter(Dragon_dat, field_season == "Field Season 1")$Date
# How long is one season?
unique(filter(Dragon_dat, field_season == "Field Season 1")$Date)
# How long is one season?
unique(filter(Dragon_dat, field_season == "Field Season 13")$Date)
unique(filter(Dragon_dat, field_season == "Field Season 1")$Date)
View(Dragon_dat)
?as.Date
library("tidyverse")
Dragon_data_full <- read_csv("Test_data_1.csv")
colnames(Dragon_data_full)
Dragon_data_full <- rename(Dragon_data_full, c("survey_id" = "Survey ID", "sighting_id" = "Sighting ID", "field_season" = "Field Season",
"body_temp" = "Body Temp (Celcius)", "Tasting_The_Ground" = "Tasting the Ground", "Tail_Slap" = "Tail-Slap",
"Head_Bob_Slow" = "Head-Bob Slow", "Head_Bob_Fast" = "Head-Bob Fast", "Head_Bob" = "Head-Bob",
"Arm_Wave_Left" = "Arm-Wave Left", "Arm_Wave_Right" = "Arm-Wave Right", "Arm_Wave" = "Arm-Wave",
"Fighting_c" = "Fighting (contact)", "Fighting_nc" = "Fighting (non-contact)",
"recorder" = "Created by", "last_modified" = "Last modified"
))
## Exclude all data without a id or body temperature measurement:
Dragon_dat <- Dragon_data_full |> drop_na(body_temp, survey_id, sighting_id)
## Enviromental variables are: field_season and location? (but they are not gradient)
unique(Dragon_dat$Location)
unique(Dragon_dat$field_season)
# How long is one season?
unique(filter(Dragon_dat, field_season == "Field Season 13")$Date)
unique(filter(Dragon_dat, field_season == "Field Season 1")$Date)
?
1
?as.Date
?separate
View(Dragon_dat)
# Dis-assemble day/month/year
Dragon_dat_days <- separate(Dragon_dat, "Date", c("Day", "Month", "Year"), sep = "/")
View(Dragon_dat_days)
View(Dragon_dat_days)
tail(table(Dragon_dat_days$Name,Dragon_dat_days$Month))
tail(table(Dragon_dat_days$Name,Dragon_dat_days$Year))
tail(table(Dragon_dat_days$Name,Dragon_dat_days$Month))
?tail
table(Dragon_dat_days$Name,Dragon_dat_days$Month)
head(table(Dragon_dat_days$Name,Dragon_dat_days$Month))
?gather
library(lme4);library(arm);library(MuMIn);library(tidyverse)
data<-readRDS("mov.metrics_weekly.rds")
setwd("C:/Users/victo/Desktop/Study/Master_works/QBIO7008/Preresearch_study")
data<-readRDS("mov.metrics_weekly.rds")
library(lme4);library(arm);library(MuMIn);library(tidyverse)
library(plyr);library(broom);library(coda);library(grid)
library(gridExtra);library(brms); library(broom.mixed); library(merTools);
library(tidybayes);library(parallel)
data<-readRDS("mov.metrics_weekly.rds")
View(data)
data_long <- data %>%
gather(Behavior, value, tac:meanDailyDisplacement)
View(data)
View(data)
View(data_long)
View(Dragon_dat_days)
plot_temp_sex <- ggplot(Dragon_dat_days, aes(x = Sex, y= body_temp, fill = Sex), xlab="") +
geom_boxplot() +
theme_classic()
plot_temp_sex
?facet_wrap
View(data)
max(Dragon_dat_days$body_temp)
which(max(Dragon_dat_days$body_temp))
?which
which(Dragon_dat_days$body_temp = max(Dragon_dat_days$body_temp))
which(Dragon_dat_days$body_temp == max(Dragon_dat_days$body_temp))
Dragon_dat_days[1789,]
which(Dragon_dat_days$body_temp == max(Dragon_dat_days$body_temp))
A <- Dragon_dat_days[1789,]
View(A)
A <- Dragon_dat_days[1790,]
View(A)
A <- Dragon_dat_days[1798,]
View(A)
Dragon_dat_days[1798,]$body_temp
?subset
Dragon_dat_days_correct_temp <- filter(Dragon_dat_days, body_temp < 50)
View(Dragon_dat_days_correct_temp)
plot_temp_sex <- ggplot(Dragon_dat_days_correct_temp, aes(x = Sex, y= body_temp, fill = Sex), xlab="") +
geom_boxplot() +
theme_classic()
plot_temp_sex
?gather
## Making general behaviors into a long format? Assuming each measurement can have only one behaviour?
Dragon_dat_days_behaviour_long <- Dragon_dat_days_correct_temp |> pivot_longer(Head_Bob:Dewlap)
View(Dragon_dat_days_behaviour_long)
## Making general behaviors into a long format? Assuming each measurement can have only one behaviour?
Dragon_dat_days_behaviour_long <- Dragon_dat_days_correct_temp |> pivot_longer(Head_Bob:Dewlap, names_to = "Behaviours", values_to = "Behaviours_value")
View(Dragon_dat_days_behaviour_long)
View(Dragon_dat_days_behaviour_long)
Dragon_dat_days_behaviour_long <- subset(filter(Dragon_dat_days_behaviour_long, Behaviours_value == "Yes"), select = -Behaviours_value)
View(Dragon_dat_days_behaviour_long)
Dragon_dat_clean <- subset(filter(Dragon_dat_days_behaviour_long, Behaviours_value == "Yes"), select = -Behaviours_value)
## Making general behaviors into a long format? Assuming each measurement can have only one behaviour?
Dragon_dat_days_behaviour_long <- Dragon_dat_days_correct_temp |> pivot_longer(Head_Bob:Dewlap, names_to = "Behaviours", values_to = "Behaviours_value")
Dragon_dat_clean <- subset(filter(Dragon_dat_days_behaviour_long, Behaviours_value == "Yes"), select = -Behaviours_value)
View(Dragon_dat_clean)
## Making models:
library(lme4)
?glmer
View(Dragon_dat_days_correct_temp)
# Make one model about resting?
m2 < - data = glmer(Resting ~ Sex + Diseased + body_temp, data = Dragon_dat_days_correct_temp, family = binomial)
# Make one model about resting?
m2 < - glmer(Resting ~ Sex + Diseased + body_temp + Month + (1|Name) + (1|Year/Month), data = Dragon_dat_days_correct_temp, family = binomial)
# Make one model about resting?
m2 <- glmer(Resting ~ Sex + Diseased + body_temp + Month + (1|Name) + (1|Year/Month), data = Dragon_dat_days_correct_temp, family = binomial)
# Make one model about resting?
as.factor(Dragon_dat_days_correct_temp$Resting)
# Make one model about resting?
Dragon_dat_resting <- as.factor(Dragon_dat_days_correct_temp$Resting)
m2 <- glmer(Resting ~ Sex + Diseased + body_temp + Month + (1|Name) + (1|Year/Month), data = Dragon_dat_resting, family = binomial)
Dragon_dat_resting
# Make one model about resting?
Dragon_dat_days_correct_temp$Resting <- as.factor(Dragon_dat_days_correct_temp$Resting)
m2 <- glmer(Resting ~ Sex + Diseased + body_temp + Month + (1|Name) + (1|Year/Month), data = Dragon_dat_days_correct_temp, family = binomial)
m2 <- glmer(Resting ~ Sex + Diseased + body_temp + Month + (1|Name) + (1|Year/Month), data = Dragon_dat_days_correct_temp, family = binomial)
m3 <- glmer(Resting ~ Sex + Month + (1|Name), data = Dragon_dat_days_correct_temp, family = binomial)
Dragon_dat_days_correct_temp$Sex <- as.factor(Dragon_dat_days_correct_temp$Sex)
Dragon_dat_days_correct_temp$Month <- as.factor(Dragon_dat_days_correct_temp$Month)
m3 <- glmer(Resting ~ Sex + Month + (1|Name), data = Dragon_dat_days_correct_temp, family = binomial)
Dragon_dat_days_correct_temp <- filter(Dragon_dat_days_correct_temp, Sex == "Male" | Sex == "Female")
Dragon_dat_days_correct_temp <- filter(Dragon_dat_days_correct_temp, Age == "Adult")
hist(Dragon_dat_days_correct_temp, body_temp)
?hist
hist(Dragon_dat_days_correct_temp$body_temp)
Dragon_dat_days_correct_temp <- filter(Dragon_dat_days_correct_temp, body_temp > 0)
library("tidyverse")
Dragon_data_full <- read_csv("Test_data_1.csv")
colnames(Dragon_data_full)
Dragon_data_full <- rename(Dragon_data_full, c("survey_id" = "Survey ID", "sighting_id" = "Sighting ID", "field_season" = "Field Season",
"body_temp" = "Body Temp (Celcius)", "Tasting_The_Ground" = "Tasting the Ground", "Tail_Slap" = "Tail-Slap",
"Head_Bob_Slow" = "Head-Bob Slow", "Head_Bob_Fast" = "Head-Bob Fast", "Head_Bob" = "Head-Bob",
"Arm_Wave_Left" = "Arm-Wave Left", "Arm_Wave_Right" = "Arm-Wave Right", "Arm_Wave" = "Arm-Wave",
"Fighting_c" = "Fighting (contact)", "Fighting_nc" = "Fighting (non-contact)",
"recorder" = "Created by", "last_modified" = "Last modified"
))
## Exclude all data without a id, name, body temperature measurement or disease status:
Dragon_dat <- Dragon_data_full |> drop_na(body_temp, survey_id, sighting_id, Name, Diseased)
## Environmental variables are: field_season and location? (but they are not gradient)
unique(Dragon_dat$Location)
unique(Dragon_dat$field_season)
# How long is one season?
unique(filter(Dragon_dat, field_season == "Field Season 13")$Date)
unique(filter(Dragon_dat, field_season == "Field Season 1")$Date)
# Dis-assemble day/month/year
Dragon_dat_clean <- separate(Dragon_dat, "Date", c("Day", "Month", "Year"), sep = "/")
# Make the dataset adult individual only:
unique(Dragon_dat_clean$Age)
Dragon_dat_clean <- filter(Dragon_dat_clean, Age == "Adult")
Dragon_dat_clean <- filter(Dragon_dat_clean, body_temp > 0 & body_temp < 50)
# Keeping columns that are relevant:
Dragon_dat_clean <- select(Dragon_dat_clean, c(survey_id, sighting_id, Day, Month, Year,
field_season, Time, Lat, Long,
Name, Sex, Diseased, Age,
Location, body_temp))
# Paste in the correct latitude and longitude
Dragon_dat_clean$Lat <- paste(-27.462, Dragon_dat_clean$Lat, sep="")
Dragon_dat_clean$Long <- paste(153.019, Dragon_dat_clean$Long, sep="")
# Changing columns into factors and numerics
str(Dragon_dat_clean)
Dragon_dat_clean[,c(1,2,6,7,10,11,12,14)] <- sapply(Dragon_dat_clean[,c(1,2,6,7,10,11,12,14)], as.factor)
Dragon_dat_clean[,c(3,4,5,8,9,15)] <- sapply(Dragon_dat_clean[,c(3,4,5,8,9,15)], as.numeric)
df_occurence_count <- as.data.frame(table(Dragon_dat_clean$Name))
df_occurence_count$Var1 <- as.character(df_occurence_count$Var1)
Dragon_dat_clean <- left_join(Dragon_dat_clean, df_occurence_count, by = c("Name" = "Var1"))
Dragon_dat_clean <- Dragon_dat_clean |> rename(total_number_recorded = Freq)
Dragon_dat_clean$total_number_recorded <- as.numeric(Dragon_dat_clean$total_number_recorded)
str(Dragon_dat_clean)
# Some plot checking:
ggplot(Dragon_dat_clean, aes(body_temp))+geom_histogram() # roughly normally distributed
ggplot(Dragon_dat_clean, aes(y = body_temp, x = Diseased)) + geom_point() # may be some differences
ggplot(Dragon_dat_clean, aes(y = body_temp, x = Sex)) + geom_point() # hard to tell if it mattered
ggplot(Dragon_dat_clean, aes(y = body_temp, x = Location)) + geom_point() # may be some differences
ggplot(Dragon_dat_clean, aes(y = body_temp, x = total_number_recorded)) + geom_point() # hard to tell if it mattered
# Follow tutorial Tom Houslay:
library(lme4)
library(MCMCglmm)
library(tidyverse)
library(broom)
library(broom.mixed)
library(nadiv)
# Make a model where name nested within Location
lmer_1 <- lmer(body_temp ~ Diseased + Sex + total_number_recorded +  (1|Location/Name), data = Dragon_dat_clean)
summary(lmer_1)
plot(lmer_1)
qqnorm(residuals(lmer_1))
hist(residuals(lmer_1))
# Testing for repeatablity: = Variance/(Variance + Variance residual) in random effect
rep_1 <- tidy(lmer_1, effects = "ran_pars", scales = "vcov") %>%
select(group, estimate) %>%
spread(group, estimate) %>%
mutate(repeatability = Location/(Location + Residual))
rep_1 ## ? Only 3% repeatability? How to test for nested random effect?
df_syndrome <- read_csv("syndrome.csv")
lmer_b <- lmer(boldness ~ scale(assay_rep, scale=FALSE) +
scale(body_size) +
(1|ID),
data = df_syndrome)
plot(lmer_b)
qqnorm(residuals(lmer_b))
hist(residuals(lmer_b))
summary(lmer_b)
rep_bold <- tidy(lmer_b, effects = "ran_pars", scales = "vcov") %>%
select(group, estimate) %>%
spread(group, estimate) %>%
mutate(repeatability = ID/(ID + Residual))
rep_bold
## Exploration:
lmer_e <- lmer(exploration ~ scale(assay_rep, scale=FALSE) +
scale(body_size) +
(1|ID),
data = df_syndrome)
rep_expl <- tidy(lmer_e, effects = "ran_pars", scales = "vcov") %>%
select(group, estimate) %>%
spread(group, estimate) %>%
mutate(repeatability = ID/(ID + Residual))
rep_expl
df_BLUPS_B <- tibble(ID = row.names(ranef(lmer_b)$ID),
BLUP_B = ranef(lmer_b)$ID[,"(Intercept)"])
df_BLUPS_E <- tibble(ID = row.names(ranef(lmer_e)$ID),
BLUP_E = ranef(lmer_e)$ID[,"(Intercept)"])
df_BLUPS_EB <- left_join(df_BLUPS_E,
df_BLUPS_B,
by = "ID")
ggplot(df_BLUPS_EB, aes(BLUP_E, BLUP_B)) + geom_point()
# test for correlation: Pearson's product-moment correlation
cor.test(df_BLUPS_EB$BLUP_E,
df_BLUPS_EB$BLUP_B)
# Setting prior:
prior_E_B_1px = list(R = list(V = diag(2), nu = 0.002),
G = list(G1 = list(V = diag(2), nu = 2,
alpha.mu = rep(0,2),
alpha.V = diag(25^2,2,2))))
mcmc_E_B_us <- MCMCglmm(cbind(scale(exploration), scale(boldness)) ~ trait-1 +
trait:scale(assay_rep, scale = FALSE) +
trait:scale(body_size),
random =~ us(trait):ID,
rcov =~ us(trait):units,
family = c("gaussian","gaussian"),
prior = prior_E_B_1px,
nitt=420000,
burnin=20000,
thin=100,
verbose = TRUE,
data = as.data.frame(df_syndrome))
par(mar=c(1,1,1,1))
plot(mcmc_E_B_us$VCV)
summary(mcmc_E_B_us)
## Fitting models using brm package
library(brms)
?brm()
lmer_2 <- brm(body_temp ~ Diseased + Sex + total_number_recorded +  (1 + Name|Location),
data = Dragon_dat_clean, family = gaussian(),
prior = c(set_prior("normal(0,5)", class = "b"),
set_prior("cauchy(0,2)", class = "sd"),
set_prior("lkj(2)", class = "cor")),
warmup = 1000, iter = 2000, chains = 4,
control = list(adapt_delta = 0.95))
lmer_2 <- brm(body_temp ~ Diseased + Sex + total_number_recorded +  (1 + Name|Location),
data = Dragon_dat_clean, family = gaussian(),
prior = c(set_prior("normal(0,10)", class = "b"),
set_prior("cauchy(0,2)", class = "sd"),),
control = list(adapt_delta = 0.95))
lmer_2 <- brm(body_temp ~ Diseased + Sex + total_number_recorded +  (1 + Name|Location),
data = Dragon_dat_clean, family = gaussian(),
prior = c(set_prior("normal(0,10)", class = "b"),
set_prior("cauchy(0,2)", class = "sd")),
control = list(adapt_delta = 0.95))
vignette("brms_multilevel")
vignette(package = "brms")
View(Dragon_dat_clean)
str(Dragon_dat_clean)
plot(density(plogis(rnorm(10^6, mean = 0, sd = 10)), from = 0, to = 1))
# Some plot checking:
ggplot(Dragon_dat_clean, aes(body_temp))+geom_histogram() # roughly normally distributed
mean(Dragon_dat_clean$body_temp)
lmer_2 <- brm(body_temp ~ Diseased + Sex + total_number_recorded +  (1|Location/Name),
data = Dragon_dat_clean, family = gaussian(),
prior = c(set_prior("normal(27,10)", class = "b"),
set_prior("cauchy(0,2)", class = "sd")),
control = list(adapt_delta = 0.95))
summary(lmer_2)
rep_1 ## ? Only 3% repeatability? How to test for nested random effect?
summary(lmer_1)
summary(lmer_2)
